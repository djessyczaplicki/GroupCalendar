<Page x:Class="GroupCalendar.View.EditEventPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      mc:Ignorable="d"
      xmlns:vm="clr-namespace:GroupCalendar.ViewModel" 
      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      xmlns:converter="clr-namespace:GroupCalendar.ViewModel.Converter"
      xmlns:validation="clr-namespace:GroupCalendar.ViewModel.Validation"
      xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
      xmlns:uc="clr-namespace:GroupCalendar.Items"
      d:DesignHeight="380" d:DesignWidth="800"
      Background="White"
      Title="EditEventPage">

    <Page.Resources>
        <vm:EditEventViewModel x:Key="vm"/>
        <validation:FutureDateValidationRule x:Key="FutureDateValidationRule" />
        <BooleanToVisibilityConverter x:Key="BoolTovisible" />
        <converter:ColorConverter x:Key="ColorConverter"/>
        <converter:DateConverter x:Key="DateConverter"/>
        <converter:TimeConverter x:Key="TimeConverter"/>
    </Page.Resources>
    <Grid DataContext="{StaticResource vm}">
        <Grid.RowDefinitions>
            <RowDefinition Height="25" />
            <RowDefinition Height="50" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <uc:StatusBar Grid.ColumnSpan="2" />

        <DockPanel LastChildFill="False" Grid.Row="1">
            <Button DockPanel.Dock="Left" 
                    Margin="5,0,0,0"
                    Command="{Binding BackCommand}"
                    Foreground="#00184a"
                    Style="{StaticResource MaterialDesignIconButton}">
                <materialDesign:PackIcon Kind="ArrowLeft" />
            </Button>
        </DockPanel>

        <StackPanel Margin="25" Grid.Row="2">
            <TextBox Text="{Binding EventModel.Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource MaterialDesignOutlinedTextBox}"
                        materialDesign:HintAssist.Hint="Nombre" 
                        VerticalAlignment="Top"
                        Margin="10"/>
            <TextBox Text="{Binding EventModel.Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource MaterialDesignOutlinedTextBox}"
                        VerticalAlignment="Top"
                        Height="100"
                        Margin="10"
                        AcceptsReturn="True"
                        TextWrapping="Wrap"
                        VerticalScrollBarVisibility="Auto"
                        materialDesign:HintAssist.Hint="Descripción" />
            <Label>Color</Label>
            <materialDesign:ColorPicker Color="{Binding EventModel.Color, Converter={StaticResource ColorConverter}}"/>
        </StackPanel>
        <StackPanel Grid.Column="1" Margin="0,0,25,10" Grid.Row="2">
            <Label>Día del evento</Label>
            <WrapPanel Orientation="Horizontal" Margin="5">
                <DatePicker
                    Margin="5"
                    materialDesign:HintAssist.Hint="Elige una fecha"
                    Style="{StaticResource MaterialDesignOutlinedDatePicker}"
                    SelectedDate="{
                        Binding EventModel.Date, 
                        Mode=TwoWay, 
                        Converter={StaticResource DateConverter}
                    }"/>
                <materialDesign:TimePicker 
                    Margin="5" 
                    materialDesign:HintAssist.Hint="Hora inicio"  
                    Style="{StaticResource MaterialDesignOutlinedTimePicker}" 
                    Is24Hours="True"
                    Text="{
                        Binding EventModel.StartTime, 
                        Mode=TwoWay, 
                        Converter={StaticResource TimeConverter}
                    }" />
                <materialDesign:TimePicker 
                    Margin="5" 
                    materialDesign:HintAssist.Hint="Hora fin"
                    Style="{StaticResource MaterialDesignOutlinedTimePicker}" 
                    Is24Hours="True"
                    Text="{
                        Binding EventModel.EndTime, 
                        Mode=TwoWay, 
                        Converter={StaticResource TimeConverter}
                    }" />
                <DatePicker
                    Margin="5" 
                    Visibility="{
                        Binding IsRecurrent, 
                        Converter={
                            StaticResource BoolTovisible
                        },
                        UpdateSourceTrigger=PropertyChanged
                    }"
                    SelectedDate="{Binding LastDate}"
                    materialDesign:HintAssist.Hint="Elige la fecha de fin de repetición"
                    Style="{StaticResource MaterialDesignOutlinedDatePicker}">
                </DatePicker>
                <WrapPanel
                    Visibility="{
                        Binding IsRecurrent, 
                        Converter={
                            StaticResource BoolTovisible
                        },
                        UpdateSourceTrigger=PropertyChanged
                    }"
                    >
                    <ListBox
                        Style="{StaticResource MaterialDesignFilterChipPrimaryOutlineListBox}"
                        ItemsSource="{Binding WeekDaysCheck}">

                        <ListBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MaterialDesignFilterChipPrimaryOutlineListBoxItem}">
                                <Setter Property="IsSelected"
                                        Value="{Binding IsChecked, Mode=TwoWay}" />
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Day}"/>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </WrapPanel>
            </WrapPanel>
            <DockPanel Margin="5" 
                       Visibility="{
                        Binding IsEditing, 
                        Converter={
                            StaticResource InverseBoolToVisConverter
                        },
                        UpdateSourceTrigger=PropertyChanged
                    }" >
                <Label DockPanel.Dock="Left">¿Es recurrente?</Label>
                <ToggleButton 
                    
                    DockPanel.Dock="Right"
                    IsChecked="{Binding IsRecurrent}"/>
                <Label/>
            </DockPanel>
            <DockPanel Margin="5">
                <Label DockPanel.Dock="Left">¿Requiere confirmación de los participantes?</Label>
                <ToggleButton DockPanel.Dock="Right" IsChecked="{Binding EventModel.RequireConfirmation}"/>
                <Label/>
            </DockPanel>
            <DockPanel Margin="5" 
                       Visibility="{
                         Binding ShowEditAll, 
                         Converter={
                            StaticResource BoolTovisible
                         },
                         UpdateSourceTrigger=PropertyChanged
                        }">
                <Label DockPanel.Dock="Left">¿Modificar todas las repeticiones?</Label>
                <ToggleButton 
                    
                    DockPanel.Dock="Right"
                    IsChecked="{Binding EditAll}"/>
                <Label/>
            </DockPanel>
            <Button Margin="20" HorizontalAlignment="Center" IsEnabled="True"
                materialDesign:ButtonProgressAssist.Value="-1"
                materialDesign:ButtonProgressAssist.IsIndicatorVisible="{Binding IsLoading}"
                materialDesign:ButtonProgressAssist.IsIndeterminate="True"
                Command="{Binding SendCommand}"
                Content="{Binding ButtonText}"
                Background="#d9e2ff"
                Foreground="#00184a">
            </Button>

        </StackPanel>

    </Grid>
</Page>
